 #! /bin/bash

VERSION="1.0"

CAUDAL=$0
while [ -h "$CAUDAL" ]; do # resolve $CAUDAL until the file is no longer a symlink
  CAUDALDIR="$( cd -P "$( dirname "$0" )" && pwd )"
  CAUDAL="$(readlink "$CAUDAL")"
  [[ $CAUDAL != /* ]] && CAUDAL="$CAUDALDIR/$CAUDAL" # if $CAUDAL is a symlink, resolve it relative to the path where the symlink file was located
done
CAUDALDIR="$( cd -P "$( dirname "$CAUDAL" )" && pwd )"

CAUDALREPORT=$CAUDALDIR/caudal-report

# VARIABLES
ASSEMBLER="flye"
CONFIG="$CAUDALDIR/../files/config_file.txt"
CPUS=1
DATE="$( date +"%Y-%m-%d" )"
FILTERING=0
HYBRID=0
METADATA=
OUTPUT=
OUTWD=
REFERENCE=
SAMPLE=
TAB="$(printf '\t')"

ARGPARSED0=$0
ALLARGSPARSED=$@

usage () {
cat << EOF

This is CAUDAL  version $VERSION
Developed by David Abad <https://github.com/dabadgarcia/CAUDAL>

usage: $0 <options>

OBLIGATORY OPTIONS:
	-m/--metadata	Path to the file with the metadata regarding the samples
			The file must have an specific organization for the program to work
			If you don't have any or you would like to have an example or extra information, 
			please type: 
			$0 example-metadata
	-o/--output	Path and name of the output directory

OTHER OPTIONS:
	--assembler	Select the assembler to use. Options available: 'flye', 'canu'
			(default='$ASSEMBLER')
        -c/--config     Path to the configuration file with the location of all dependencies
                        (default="$CONFIG")
	--citation	Show citation
	--filtering	Enables optional filtering with filtlong.
	-h/--help	Show this help
	--hybrid	Performs an hybrid assembly with illumina reads (path to the files must be specified in the metadata)
	-r/--reference	Type path to reference genome (fasta, gbk) (default='none')
			Reference will be used for contig ordering of the draft genome
	-t/--threads	Number of threads to use (default=$CPUS) <integer>
	-v/--version	Show version


For further explanation please visit: https://github.com/dabadgarcia/CAUDAL

EOF
}

if [ $# == 0 ]; then
	usage
	exit 1
fi

# GENERATING EXAMPLE METADATA FILE IF NEEDED

if [ "$1" == "example-metadata" ]
then
cat << EOF > samples_metadata.txt
Samples${TAB}Reads${TAB}Illumina_forward${TAB}Illumina_reverse${TAB}Description${TAB}Use_as_many_descrpition_colums_as_wanted
Sample1${TAB}Directory/seqs.fastq.gz${TAB}Directory/illumina.forward.fastq.gz${TAB}Directory/illumina.reverse.fastq.gz${TAB}E.coli isolated in 2018${TAB}Colistin resistant
EOF

cat << EOF

An example "samples_metadata.txt" has been created in the current directory
Modify it in your preferred text editor by respecting the organization of the example:
	- Columns must be tab separated
	- First column must me called "Samples" and harbor samples names (avoid special characters)
	- Second column must be called "Reads" and harbor the path to the reads (either fastq or fastq.gz)
	- Third column must be called "Illumina_forward" and harbor the path to the R1 Illumina reads (either fastq or fastq.gz)
	- Fourth column must be called "Illumina_reverse" and harbor the path to the R2 Illumina reads (either fastq or fastq.gz)
	- Fith (and so on) columns are descriptive. They are no needed for the program but the information will appear in the report
	  Add as much as you want.


EOF
        exit 1
fi

# VARIABLE OPTIONS

POSITIONAL=()
while [[ $# -gt 0 ]]
do
ARGS="$1"

case $ARGS in
        --assembler)
            if [ "$2" ]; then
                if [ $2 == 'spades' ] || [ $2 == 'megahit' ]; then
		ASSEMBLER=$2
                shift 2
		else
		    echo -e '\nERROR: unknown option for "--assembler"'
		    echo 'Options available: "spades" and "megahit"'
		    echo -e "argument parsed: $2 \n"
		    exit 1
		fi
            else
                echo -e '\nERROR: "--assembler" requires an argument\n'
                echo 'Options available: "spades" and "megahit"'
                echo -e 'Default option: "spades" \n'
                exit 1
            fi
            ;;
        --citation)
            echo -e "\n If using CAUDAL, please cite:"
	    echo -e "\n Quijada, N.M., Rodriguez-Lazaro, D. and  Hernandez, M. CAUDAL. (2019) GitHub (https://github.com/nmquijada/CAUDAL/)\n"
            exit 1
            ;;
	-c|--config)
	    if [ "$2" ]; then
                CONFIG=$2
                shift 2
                if [ ! -e "$CONFIG" ]
                    then echo -e "\nERROR: $CONFIG doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$CONFIG" ]
                    then echo -e "\nERROR: Size of $CONFIG is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-c/--config" requires an argument\n'
                exit 1
            fi
            ;;
        --filtering)
	    FILTERING=1
            shift
            ;;
	-h|-\?|--help)
	    usage
	    exit 1
	    ;;
        --hybrid)
	    HYBRID=1
            shift
            ;;
	-m|--metadata)
	    if [ "$2" ]; then
                METADATA=$2
                shift 2
                if [ ! -e "$METADATA" ]
                    then echo -e "\nERROR: $METADATA doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$METADATA" ]
                    then echo -e "\nERROR: Size of $METADATA is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-m/--metadata" requires an argument\n'
                exit 1
            fi
            ;;
	-o|--output)
	    if [ "$2" ]; then
                OUTPUT=$2
                shift 2
                if [ -d "$OUTPUT" ]
                    then echo -e "\nERROR: $OUTPUT already exist! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-o/--output" requires an argument\n'
                exit 1
            fi
            ;;
	-r|--reference)
	    if [ "$2" ]; then
		REFERENCE=$2
		shift 2
		if [ ! -e "$REFERENCE" ]
		    then echo -e "\nERROR: $REFERENCE doesn't exist! Please check \n"
		    exit 1
		fi
		if [ ! -s "$REFERENCE" ]
		    then echo -e "\nERROR: Size of $REFERENCE is 0! Please check \n"
		    exit 1
		fi
	    else
		echo -e '\nERROR: "-r/--reference" requires an argument\n'
                exit 1
            fi
            ;;
	-t|--threads)
	    if [ "$2" ]; then    
		if [ "$2" -eq "$2"  ] 2>/dev/null ; then
                    CPUS=$2
                    shift 2
                else
                        echo -e '\nERROR: "-t/--threads" requires a numeric argument'
                        echo -e "argument parsed: $2 \n"
                        exit 1
                fi
	    else
		echo -e '\nERROR: "-t/--threads" requires a numeric argument\n'
    	    fi
	    ;;
	-v|--version)
	    echo "CAUDAL version $VERSION"
	    exit 1
	    ;;
	-?*)
	    echo -e "\nERROR: unknown option: $1 \n"
	    usage
	    exit 1
	    ;;
	*)
	    echo -e "\nERROR: unknown option: $1 \n"
            usage
            exit 1
            ;;
esac
done
set -- "${POSITIONAL[@]}" #restore positional parameters

# CHECK OBLIGATORY VARIABLES
if [ -z "$OUTPUT" ] || [ -z "$METADATA" ]; then
	echo ""
	if [ -z "$METADATA" ]; then
           echo 'ERROR: "-m/--metadata" option is needed!'
        fi
	if [ -z "$OUTPUT" ]; then
	   echo 'ERROR: "-o/--output" option is needed!'
	fi
	echo ""
	exit 1
fi

# CHECK METADATA FORMAT
## Number of colums
head -n 1 $METADATA > temp1
read NCOL <<< $(awk -F "$TAB" '{print NF}' temp1 | sort -nu | tail -n 1)
if [ $NCOL -lt "3" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (number of columns < 3), please check"
	echo -e "Type: '$0 example-metadata' for extra information\n"
	rm -f temp1
	exit 1
fi
rm -f temp1
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 1)
if [ $HEADER != "Samples" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (First row first column should be 'Samples'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 2)
if [ $HEADER != "Reads" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (First row second column should be 'Reads'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi
if [ "$HYBRID" == "1" ]; then 
	read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 3)
	if [ $HEADER != "Illumina_forward" ]; then
        	echo -e "\nERROR: $METADATA format is incorrect (First row third column should be 'Illumina_forward'), please check"
        	echo -e "Type: '$0 example-metadata' for extra information\n"
        	exit 1
	fi
	read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 4)
	if [ $HEADER != "Illumina_reverse" ]; then
        	echo -e "\nERROR: $METADATA format is incorrect (First row fourth column should be 'Illumina_reverse'), please check"
        	echo -e "Type: '$0 example-metadata' for extra information\n"
        	exit 1
	fi
fi

## Samples names and files are unique
duplicate_check() {
	{ sort | uniq -d | grep . -qc; } < "$1"
}

tail -n +2 $METADATA > temp1
cut -f 1 -d "$TAB" temp1 > temp2
if duplicate_check temp2; then
	echo -e "\nERROR: some samples names are equal! Please check\n"
	rm -f temp2
	exit 1
fi
rm -f temp2
for i in 2; do
	cut -f $i -d "$TAB" temp1 > temp2
	if duplicate_check temp2; then
            echo -e "\nERROR: some reads are equal in different samples! Please check\n"
            rm -f temp2
            exit 1
	fi
done
if [ "$HYBRID" == "1" ]; then
	for i in 3; do
		cut -f $i -d "$TAB" temp1 > temp2
		if duplicate_check temp2; then
        		echo -e "\nERROR: some reads are equal in different samples! Please check\n"
        		rm -f temp2
        		exit 1
		fi
	done
	for i in 4; do
		cut -f $i -d "$TAB" temp1 > temp2
		if duplicate_check temp2; then
        		echo -e "\nERROR: some reads are equal in different samples! Please check\n"
        		rm -f temp2
        		exit 1
		fi
	done
fi

## There are no empty fields
for i in $(seq 1 $NCOL); do
	cut -f $i -d "$TAB" $METADATA > temp$i
	read TEMP1 <<< $(grep -cvE '[^[:space:]]' temp$i)
	if [ $TEMP1 -gt "0" ]; then
	    echo -e "\nERROR: Some fields in $METADATA are blank! Please check\n"
	    rm -f temp$i
	    exit 1
	fi
	rm -f temp$i
done

## Check that reads files exist and aren't empty
tail -n +2 $METADATA > temp1
cut -f 2 -d "$TAB" temp1 > temp2
for i in $(<temp2); do
	if [ ! -e "$i" ]
	    then echo -e "\nERROR: $i doesn't exist! Please check \n"
    	    rm -f temp1 temp2
            exit 1
        fi
        if [ ! -s "$i" ]
            then echo -e "\nERROR: $i is empty! Please check \n"
	    rm -f temp1 temp2
            exit 1
        fi
done
if [ "$HYBRID" == "1" ]; then
	cut -f 3 -d "$TAB" temp1 > temp2
	for i in $(<temp2); do
		if [ ! -e "$i" ]
			then echo -e "\nERROR: $i doesn't exist! Please check \n"
			rm -f temp1 temp2
			exit 1
		fi
        	if [ ! -s "$i" ]
			then echo -e "\nERROR: $i is empty! Please check \n"
			rm -f temp1 temp2
			exit 1
		fi
	done
	cut -f 4 -d "$TAB" temp1 > temp2
	for i in $(<temp2); do
		if [ ! -e "$i" ]
			then echo -e "\nERROR: $i doesn't exist! Please check \n"
			rm -f temp1 temp2
			exit 1
		fi
        	if [ ! -s "$i" ]
			then echo -e "\nERROR: $i is empty! Please check \n"
			rm -f temp1 temp2
			exit 1
		fi
	done
fi
rm -f temp1 temp2

# CHECK DEPENDENCIES

ABRICATE="$( grep -w "^ABRICATE\s" $CONFIG | cut -f 2 -d "$TAB" )"
BLASTBINS="$( grep -w "^BLAST-2\.6_or_later-BINARIES\s" $CONFIG | cut -f 2 -d "$TAB" )"
CONVERT="$( grep -w "^CONVERT\s" $CONFIG | cut -f 2 -d "$TAB" )"
FILTLONG="$( grep -w "^FILTLONG\s" $CONFIG | cut -f 2 -d "$TAB" )"
FLYE="$( grep -w "^FLYE\s" $CONFIG | cut -f 2 -d "$TAB" )"
GTDBTK="$( grep -w "^GTDBTK\s" $CONFIG | cut -f 2 -d "$TAB" )"
PARALLEL="$( grep -w "^PARALLEL\s" $CONFIG | cut -f 2 -d "$TAB" )"
#REBALER="$( grep -w "^REBALER\s" $CONFIG | cut -f 2 -d "$TAB" )"
RSCRIPT="$( grep -w "^RSCRIPT\s" $CONFIG | cut -f 2 -d "$TAB" )"
UNICYCLER="$( grep -w "^UNICYCLER\s" $CONFIG | cut -f 2 -d "$TAB" )"

for i in $ABRICATE $CONVERT $FLYE $GTDBTK $PARALLEL $UNICYCLER; do
        if command -v $i >/dev/null 2>&1 ; then
            echo "Software: $i found"
#            echo -e "Version is: \c"
#            $i -v
        else
            echo -e "\nERROR: Software $i not found! Please check if:"
	    echo -e "\t * Software is not installed"
	    echo -e "\t * Software is installed but the path in $CONFIG is incorrect\n"
	    exit 1
        fi
done

# START WORKING
## CREATE WORKING DIRECTORY AND CREATE SAMPLES VARIABLE

mkdir -p $OUTPUT
if [ ! -d $OUTPUT ]; then
	echo -e "\nERROR: $OUTPUT could not be created in the selected directory\n"
	exit 1
fi

OUTEMP="$( cd -P "$( dirname "$OUTPUT" )" && pwd )"
OUTWD="$OUTEMP/$OUTPUT"
SAMPLE="$( tail -n +2 $METADATA | cut -f 1 -d "$TAB" )"
tail -n +2 $METADATA | cut -f 1 -d "$TAB" > $OUTWD/list.tmp

cat << EOF

Thanks for using CAUDAL version $VERSION
Status can be shown in "$OUTWD/CAUDAL.log"

EOF

cat << EOF >> $OUTWD/CAUDAL.log

This is CAUDAL version $VERSION

Script used:
$ARGPARSED0 $ALLARGSPARSED

Parameters set:
	- Metadata file: $METADATA
	- Output directory: $OUTPUT
	- Number of threads to use: $CPUS
EOF

if [ ! -z $REFERENCE ]; then
        echo -e "$TAB- Reference used: $REFERENCE \n" >> $OUTWD/CAUDAL.log
fi
	
echo "" >> $OUTWD/CAUDAL.log

echo -e "CAUDAL pipeline started at: \c" >> $OUTWD/CAUDAL.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/CAUDAL.log
echo ""

mkdir -p $OUTWD/raw_reads
for i in $SAMPLE; do
        DIRR1="$( grep -w "^$i" $METADATA | cut -f 2 -d "$TAB" )"
	if [[ $DIRR1 =~ \.gz$ ]]; then
	    cp -f $DIRR1 $OUTWD/raw_reads/$i\.fastq.gz
	else
	    cp -f $DIRR1 $OUTWD/raw_reads/$i\.fastq
	fi
done

if [ "$HYBRID" == "1" ]; then
	mkdir -p $OUTWD/forward
	mkdir -p $OUTWD/reverse
	for i in $SAMPLE; do
	        DIRR1="$( grep -w "^$i" $METADATA | cut -f 3 -d "$TAB" )"
        	DIRR2="$( grep -w "^$i" $METADATA | cut -f 4 -d "$TAB" )"
		if [[ $DIRR1 =~ \.gz$ ]]; then
	    		cp -f $DIRR1 $OUTWD/forward/$i\_R1.fastq.gz
		else
	   		cp -f $DIRR1 $OUTWD/forward/$i\_R1.fastq
		fi
		if [[ $DIRR2 =~ \.gz$ ]]; then
            		cp -f $DIRR2 $OUTWD/reverse/$i\_R2.fastq.gz
        	else
            		cp -f $DIRR2 $OUTWD/reverse/$i\_R2.fastq
        	fi
	done
fi

## QUALITY FILTERING

if [ "$FILTERING" == '1' ]; then
	echo -e "Quality filtering process started at: \c" >> $OUTWD/CAUDAL.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/CAUDAL.log

	mkdir -p $OUTWD/cleaned_reads

	for i in $SAMPLE; do
		$FILTLONG --min_length 1000 --keep_percent 90 --target_bases 500000000 $OUTWD/raw_reads/$i\.fastq.gz | gzip > $OUTWD/cleaned_reads/$i\.ok.fastq.gz
	done

	$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/raw_reads/

	for i in $SAMPLE; do
		zcat $OUTWD/cleaned_reads/$i\.ok_*.fastq.gz | awk 'BEGIN { t=0.0;sq=0.0; n=0;} ;NR%4==2 {n++;L=length($0);t+=L;sq+=L*L;}END{m=t/n;printf("total\tavg\n%d\t%f\n",n,m,sq/n-m*m);}' > $OUTWD/cleaned_reads/$i\.ok.stats
		sed -i 's/\..*//' $OUTWD/cleaned_reads/$i\.ok.stats
	done
fi

## ASSEMBLY
if [ "$HYBRID" == "0" ]; then
	echo -e "Assembly started at: \c" >> $OUTWD/CAUDAL.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/CAUDAL.log
	mkdir -p $OUTWD/assembly
	#mkdir -p $OUTWD/assembly_polish
	mkdir -p $OUTWD/draft_genomes
	if [ "$ASSEMBLER" == 'flye' ]; then
        	if [ $FILTERING == 0 ]; then
			for i in $SAMPLE; do
				$FLYE --nano-raw $OUTWD/raw_reads/$i\.fastq -o $OUTWD/assembly/$i\_assembly -t $CPUS --genome-size 5.5m
				#cp $OUTWD/assembly/$i\_assembly/assembly.fasta $OUTWD/assembly_polish/$i\_assembly.fasta
				cp $OUTWD/assembly/$i\_assembly/assembly.fasta $OUTWD/draft_genomes/$i.fasta
				#$REBALER --threads $CPUS $OUTWD/assembly_polish/$i\_assembly.fasta $OUTWD/raw_reads/$i\.fastq > $OUTWD/assembly_polish/$i\_rebaler.fasta
				#$MEDAKA -i $OUTWD/raw_reads/$i\.fastq -d $OUTWD/assembly_polish/$i\_rebaler.fasta -o $OUTWD/assembly_polish/$i\_medaka -t $CPUS -m r941_min_high
				#cp $OUTWD/assembly_polish/$i\_medaka/consensus.fasta $OUTWD/draft_genomes/$i.fasta
				#cp $OUTWD/assembly_polish/$i\_rebaler.fasta $OUTWD/draft_genomes/$i.fasta
			done
		else
			for i in $SAMPLE; do
				$FLYE --nano-raw $OUTWD/cleaned_reads/$i\.ok.fastq -o $OUTWD/assembly/$i\_assembly -t $CPUS --genome-size 5.5m
				cp $OUTWD/assembly/$i\_assembly/assembly.fasta $OUTWD/assembly_polish/$i\_assembly.fasta
				$REBALER --threads $CPUS $OUTWD/assembly_polish/$i\_assembly.fasta $OUTWD/cleaned_reads/$i\.ok.fastq > $OUTWD/assembly_polish/$i\_rebaler.fasta
				$MEDAKA -i $OUTWD/cleaned_reads/$i\.ok.fastq -d $OUTWD/assembly_polish/$i\_rebaler.fasta -o $OUTWD/assembly_polish/$i\_medaka -t $CPUS -m r941_min_high
				cp $OUTWD/assembly_polish/$i\_medaka/consensus.fasta $OUTWD/draft_genomes/$i.fasta
			done
		fi	
	fi
fi

# if [ "$ASSEMBLER" == 'canu' ] || [ "$HYBRID" == "0" ]; then
#        if [ $FILTERING == 0 ]; then
#		$CANU --nano-raw $OUTWD/raw_reads/$i\.fastq.gz -o $OUTWD/assembly/$i\_assembly -t $CPUS
#	else
#		$CANU --nano-raw $OUTWD/cleaned_reads/$i\.ok.fastq.gz -o $OUTWD/assembly/$i\_assembly -t $CPUS
#	fi
# fi

## HYBRID ASSEMBLY
if [ "$HYBRID" == "1" ]; then
	echo -e "Hybrid assembly started at: \c" >> $OUTWD/CAUDAL.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/CAUDAL.log
	mkdir -p $OUTWD/assembly
	mkdir -p $OUTWD/draft_genomes
	for i in $SAMPLE; do
		$FLYE --nano-raw $OUTWD/raw_reads/$i\.fastq -o $OUTWD/assembly/$i\_assembly -t $CPUS --genome-size 5.5m
		$UNICYCLER -1 $OUTWD/forward/$i\_R1.fastq.gz -2 $OUTWD/reverse/$i\_R2.fastq.gz -l $OUTWD/raw_reads/$i.fastq -o $OUTWD/assembly/$i\_hybrid_assembly -t $CPUS --existing_long_read_assembly $OUTWD/assembly/$i\_assembly/assembly.fasta
		cp $OUTWD/assembly/$i\_hybrid_assembly/assembly.fasta $OUTWD/draft_genomes/$i.fasta
	done
fi

if [ "$HYBRID" == "1" ]; then
	rm -r $OUTWD/forward/
	rm -r $OUTWD/reverse/
fi

## ASSEMBLY FORMAT

for i in $SAMPLE; do
        if [ ! -e $OUTWD/draft_genomes/$i.fasta ]; then
            echo -e "$TAB-WARNING: $i did not generate an assembly file and will be excluded for further analysis" >> $OUTWD/CAUDAL.log
	    echo "$i" >> $OUTWD/excludinglist.tmp
        fi
done

if [ -e $OUTWD/excludinglist.tmp ]; then
	awk 'NR==FNR{a[$0]=1;next}!a[$0]' $OUTWD/excludinglist.tmp $OUTWD/list.tmp > $OUTWD/list2.tmp
	mv $OUTWD/list2.tmp $OUTWD/list.tmp
	SAMPLE="$(<$OUTWD/list.tmp)"
	rm -f $OUTWD/excludinglist.tmp
fi

for i in $SAMPLE; do
	cut -f 1,2,3,4 $OUTWD/assembly/$i\_assembly/assembly_info.txt | sed '1d'  > $OUTWD/assembly/$i\_assembly_info.txt	 
done

$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu tar cfz $OUTWD/assembly/{}\_assembly.tgz -C $OUTWD/assembly/ {}\_assembly
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu rm -rf $OUTWD/assembly/{}\_assembly

## SPECIES IDENTIFICATION
echo -e "Species identification started at: \c" >> $OUTWD/CAUDAL.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/CAUDAL.log

$GTDBTK classify_wf --genome_dir $OUTWD/draft_genomes/ --out_dir $OUTWD/species_identification/ --cpus $CPUS --extension fasta
 
cut -f 1,2 $OUTWD/species_identification/gtdbtk.bac120.summary.tsv | sed '1d;s/d\_.*_//g' | sort > $OUTWD/species_identification/gtdbtk_summary.txt

## Things to do before finishing
rm -f $OUTWD/list.tmp
if [ -e $OUTWD/title_CAUDAL.tmp ]; then
	rm -f $OUTWD/title_CAUDAL.tmp
fi

echo -e "CAUDAL pipeline finished at: \c" >> $OUTWD/CAUDAL.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/CAUDAL.log
