#! /bin/bash

CAUDALVERSION="1.0"
VERSION="1.0"

if [ $# == 0 ]; then
cat << EOF

This is caudal-report version $VERSION
This script generates a Rmarkdown file with the report from CAUDAL analysis data
WARNING: positional arguments are required

usage: $0 <working directory> <metadata> <abricate path> <CAUDAL path> <reference> <genera>

EOF

exit 1
fi

#VARIABLES

ABRICATE=$3
DATE="$( date +"%Y-%m-%d" )"
GENERA=$5
METADATA=$2
OUTWD=$1
SAMPLE="$(<$OUTWD/list.tmp)"
TAB="$(printf '\t')"
TITLE="$(<$OUTWD/title_CAUDAL.tmp)"
CAUDALDIR=$4

#FORMATTING FILES FOR REPORT
mkdir -p $OUTWD/report_files
cp -f $METADATA $OUTWD/report_files/metadata.txt
for i in $SAMPLE; do
	cp -f $OUTWD/assembly/$i\_assembly_info.txt $OUTWD/report_files/
done
cp -f $OUTWD/species_identification/gtdbtk_summary.txt $OUTWD/report_files/
cp -f $OUTWD/mlst/mlst*.tab $OUTWD/report_files/
cp -f $OUTWD/antibiotic_resistance_genes/*/*tab $OUTWD/report_files/
cp -f $OUTWD/virulence_genes/*tab $OUTWD/report_files/

if [ -s $OUTWD/pangenome/summary_statistics.txt ] && [ -s $OUTWD/pangenome/pangenome.png ]; then
	cp -f $OUTWD/pangenome/pangenome.png $OUTWD/report_files/
	cp -f $OUTWD/pangenome/summary_statistics.txt $OUTWD/report_files/
fi
if [ -s $OUTWD/pangenome/accessory_binary_genes.fa.newick ]; then
	cp -f $OUTWD/pangenome/accessory_binary_genes.fa.newick $OUTWD/report_files/
fi
if [ -s $OUTWD/pangenome/core_gene_alignment.newick ]; then
	cp -f $OUTWD/pangenome/core_gene_alignment.newick $OUTWD/report_files/
fi

## Antibiotic resistance genes summary file
for i in $SAMPLE; do
	for j in resfinder card argannot; do
   	    awk -v OFS="$TAB" -F "$TAB" '(NR>1) && ($10 > 90)' $OUTWD/report_files/$i\_$j\.tab > $OUTWD/report_files/$i\_$j\_tmp.tab
	    awk -v OFS="$TAB" -F "$TAB" '($11 > 90)' $OUTWD/report_files/$i\_$j\_tmp.tab > $OUTWD/report_files/$i\_$j\_min90.tab
	    sed -i "1i#FILE${TAB}SEQUENCE${TAB}START${TAB}END${TAB}GENE${TAB}COVERAGE${TAB}COVERAGE_MAP${TAB}GAPS${TAB}%COVERAGE${TAB}%IDENTITY${TAB}DATABASE${TAB}ACCESSION${TAB}PRODUCT" $OUTWD/report_files/$i\_$j\_min90.tab
	    rm -f $OUTWD/report_files/$i\_$j\_tmp.tab
	done
done
for j in resfinder card argannot; do
	$ABRICATE $OUTWD/report_files/*$j\_min90.tab --summary > $OUTWD/report_files/$j\_summary.tab
done
for i in $SAMPLE; do
	for j in resfinder card argannot; do
       	    sed -i "s/$i\_$j\_min90.tab/$i/" $OUTWD/report_files/$j\_summary.tab
	    sed -i "s/.*report_files\///" $OUTWD/report_files/$j\_summary.tab
	    #sed -i "s/.*$i/$i/" $OUTWD/report_files/$j\_summary.tab
	    #rm -f $OUTWD/report_files/$i\_$j\_min90.tab
	done
done
for j in resfinder card argannot; do
	sed -i 's/'\''//g' $OUTWD/report_files/$j\_summary.tab
	sed -i 's/#FILE/FILE/g' $OUTWD/report_files/$j\_summary.tab
	sed -i "s/\t\./\t0/g" $OUTWD/report_files/$j\_summary.tab
	sed -i 's/[0-9]*;[0-9]*/abc/g' $OUTWD/report_files/$j\_summary.tab
	sed -i 's/abc.//g' $OUTWD/report_files/$j\_summary.tab
done

## Resfinder gene per isolate
cut -d "$TAB" -f 6 $OUTWD/report_files/*resfinder_min90.tab | sed "s/GENE//" | sed "/^$/d" | sort -u > $OUTWD/report_files/tmp1.txt
for i in $(<$OUTWD/report_files/tmp1.txt); do
	echo -e "$i\t\c" >> $OUTWD/report_files/tmp2.txt
	cat $OUTWD/report_files/*resfinder_min90.tab | grep -c $i >> $OUTWD/report_files/tmp2.txt
done
cut -d "$TAB" -f 1 $OUTWD/report_files/tmp2.txt | sed "s/_.*//" > $OUTWD/report_files/tmp3.txt
for i in $(<$OUTWD/report_files/tmp3.txt); do
	if ! grep -i "^$i\s" $CAUDALDIR/../files/resfinder_notes.txt &>/dev/null; then
	    echo "Unknown" >> $OUTWD/report_files/tmp4.txt
	else
	    grep -i "^$i\s" $CAUDALDIR/../files/resfinder_notes.txt | cut -f 2 >> $OUTWD/report_files/tmp4.txt
	fi
done
paste -d "$TAB" $OUTWD/report_files/tmp2.txt $OUTWD/report_files/tmp4.txt > $OUTWD/report_files/resfinder_gene_per_isolate.txt
sed -i "1iGene${TAB}Count${TAB}Resistance" $OUTWD/report_files/resfinder_gene_per_isolate.txt
#sed -i 's/'\''//g' $OUTWD/report_files/resfinder_gene_per_isolate.txt
rm -f $OUTWD/report_files/tmp*.txt
rm -f $OUTWD/report_files/*min90.tab

##Other formatting
for i in $SAMPLE; do
        for j in resfinder card argannot vfdb; do
	    sed -i 's/#FILE/FILE/g' $OUTWD/report_files/$i\_$j.tab
#	    sed -i 's/'\''//g' $OUTWD/report_files/$i\_$j.tab
            sed -i 's/_length/ length/g' $OUTWD/report_files/$i\_$j.tab
            sed -i 's/_cov/ cov/g' $OUTWD/report_files/$i\_$j.tab
	done
done


cp -f $OUTWD/plasmids/*tab $OUTWD/report_files/
	for i in $SAMPLE; do
	    sed -i 's/#FILE/FILE/g' $OUTWD/report_files/$i\_plasmids.tab
#	    sed -i 's/'\''//g' $OUTWD/report_files/$i\_plasmids.tab
	done


#GENERATING R-MARKDOWN FILE
cat << EOF > $OUTWD/report_files/CAUDAL_report.Rmd
---
title: "$TITLE"
date: "$DATE"
output: html_document
---
\`\`\`{r, echo=FALSE, message=FALSE, warning=FALSE}
library(ggplot2)
library(ggtree)
library(knitr)
library(plotly)
library(RColorBrewer)
library(reshape2)
library(phytools)
knitr::opts_chunk\$set(dpi=120, fig.align = "center")
\`\`\`

CAUDAL version $VERSION

<br>
 
### Quick link to sections {.sidebar #index}
* #### [Samples description](#description)
* #### [Assembly analysis](#assembly)
* #### [Species identification](#identification)
* #### [Multi-Locus Sequence Typing (MLST)](#mlst)
* #### [Pangenome analysis](#pangenome)
* #### [Antibiotic resistance](#resistance)
* #### [Virulence genes](#virulence)
* #### [Plasmid replicons](#plasmids)
* #### [Citation](#cite)

<br>

## Samples description {#description}
\`\`\`{r, echo=FALSE}
setwd("$OUTWD/report_files")
data=read.table("metadata.txt", header = T, sep = "\t", dec = ".", check.names = FALSE)
if (ncol(data)<4){
	seqdata=as.data.frame(data[,1])
	print ("No more data regarding samples was provided")
} else {
	data=data[-2]
	seqdata=data[-2]
}
colnames(seqdata)[1]="Samples"
kable(seqdata, results= 'asis', align="c")
\`\`\`

<br>

[Back to index](#index)

## Assembly analysis {#assembly}
<br>

Field | Description
----- | ---------------------------------------------------------------------------------------
**Seq_name** | Contigs of the draft genome 
**ContigLength** | Length (bp) of the contig
**Coverage** | Number of times each nucleotide position in the draft genome has a read that align to that position
**Circuralization** | Circularization

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
##### $i
\`\`\`{r, echo=FALSE}
seqdata=read.table("${i}_assembly_info.txt", sep = "\t")
colnames(seqdata)=c("Seq_name", "ContigLength", "Coverage", "Circularization")
kable(seqdata, results='asis', align = "c")
\`\`\`

EOF
done 

cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd

#

<br>

[Back to index](#index)

## Species identification {#identification}

\`\`\`{r, echo=FALSE}
seqdata=read.table("gtdbtk_summary.txt", sep = "\t")
colnames(seqdata)=c("Isolate", "Species")
kable(seqdata, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

## Multi-Locus Sequence Typing (MLST) {#mlst}
EOF
if [ -s $OUTWD/report_files/mlst.tab ]; then
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
Further details can be found in [mlst web page](https://github.com/tseemann/mlst).

Symbol | Meaning
------ | ---------------------------------------------------------------------------------------
~ | novel full length allele similar to match
? | partial match to known allele
- | allele missing

<br>

EOF
fi
if [ "$GENERA" == 'Escherichia' ]; then
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
Two MLST schemes are available for *Escherichia coli*:

<br>

\`\`\`{r, echo=FALSE, error=TRUE}
seqdata=read.table("mlst-1.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
seqdata=as.data.frame(seqdata)
seqdata=seqdata[order(row.names(seqdata)),]
colnames(seqdata)[1]="Scheme"
colnames(seqdata)[2]="ST"
for (i in 3:ncol(seqdata)){
        colnames(seqdata)[i]=i-2
}
kable(seqdata, results='asis', align = "c")
\`\`\`

<br>

\`\`\`{r, echo=FALSE}
seqdata=read.table("mlst-2.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
seqdata=as.data.frame(seqdata)
seqdata=seqdata[order(row.names(seqdata)),]
colnames(seqdata)[1]="Scheme"
colnames(seqdata)[2]="ST"
for (i in 3:ncol(seqdata)){
        colnames(seqdata)[i]=i-2
}
kable(seqdata, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
elif [ -s $OUTWD/report_files/mlst.tab ]; then
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
\`\`\`{r, echo=FALSE}
seqdata=read.table("mlst.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
seqdata=as.data.frame(seqdata)
seqdata=seqdata[order(row.names(seqdata)),]
colnames(seqdata)[1]="Scheme"
colnames(seqdata)[2]="ST"
for (i in 3:ncol(seqdata)){
	colnames(seqdata)[i]=i-2
}
kable(seqdata, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
else
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
WARNING: MLST analysis was disabled by using the \`--no-mlst\` option

<br>

[Back to index](#index)

EOF

fi

echo "## Pangenome analysis {#pangenome}" >> $OUTWD/report_files/CAUDAL_report.Rmd
if [ -s $OUTWD/report_files/summary_statistics.txt ] && [ -s $OUTWD/report_files/pangenome.png ]; then
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
#### Pangenome genes summary
\`\`\`{r, echo=FALSE}
seqdata=read.table("summary_statistics.txt", header = F, sep = "\t", dec = ".")
seqdata=as.data.frame(seqdata)
colnames(seqdata)=c("Genes", "Description", "Number")
kable(seqdata, results='asis', align = "c")
\`\`\`

#### 
\`\`\`{r, echo=FALSE}
seqdata=read.table("summary_statistics.txt", header = F, sep = "\t", dec = ".")
seqdata=as.data.frame(seqdata)
seqdata=seqdata[,-2]
seqdata=seqdata[-5,]
colnames(seqdata)=c("Genes", "Number")
piepercent=round(100*seqdata\$Number/sum(seqdata\$Number), 1)
pie(seqdata\$Number, labels = piepercent, col = c("red2", "gold", "forestgreen", "dodgerblue4"), init.angle=90, radius=1, main="Percent of pangenome genes", clockwise = T, border = F)
par(new=TRUE)
pie(x=1, init.angle=90, col= "white", labels='', radius=0.7, border=F)
legend("center", c ("Core genes", "Soft core genes", "Shell genes", "Cloud genes"), cex = 1, fill = c("red2", "gold", "forestgreen", "dodgerblue4"))
\`\`\`


#### Schematic representation of genes presence (color) or absence (blank) between ssamples:
![](pangenome.png)

<br>

EOF
	if [ -s $OUTWD/report_files/accessory_binary_genes.fa.newick ]; then
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
#### Pangenome tree based on presence/absence of accesory genes representation {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3) + xlim_tree(treelim)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3)
\`\`\`

##### Rectangular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, branch.length="none") + geom_tiplab(size=3) + xlim_tree(11)
#El limite aqui puede ser funcion del numero de muestras
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3)
\`\`\`

#


<br>

[Back to index](#index)

EOF
	else
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
WARNING: Pangenome tree based on the presence/absence of accesory genes was not generated during pangenome analysis. Please check.

<br>

[Back to index](#index)

EOF
	fi
        if [ -s $OUTWD/report_files/core_gene_alignment.newick ]; then
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
#### Pangenome tree based on core genome alignment representation {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3) + xlim_tree(treelim)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3)
\`\`\`

##### Rectangular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, branch.length="none") + geom_tiplab(size=3) + xlim_tree(11)
#El limite aqui puede ser funcion del numero de muestras
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3)
\`\`\`

#


<br>

[Back to index](#index)

EOF
        else
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
WARNING: Core genome alignment tree was not generated during pangenome analysis. Please check.

<br>

[Back to index](#index)

EOF
        fi

else
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
Pangenome analysis was not performed.

<br>

[Back to index](#index)

EOF
fi
cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
## Antibiotic resistance {#resistance}
The search of antibiotic resistance genes was performed by screening of the draft genome against Resfinder ([E. Zankari et al., 2012](https://www.ncbi.nlm.nih.gov/pubmed/22782487)), CARD ([A.G. McArthur et al., 2013](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3697360/)) and ARG-ANNOT ([S.K. Gupta et al., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24145532)) databases by using [Abricate](https://github.com/tseemann/abricate). Any hit with coverage and/or identity below 90% was removed.

<br>

Field | Description
----- | -------------------------------------------------------------------------
**Contig** | Contig name where the gene was found
**Start** | Start position of the gene within the contig
**End** | End position of the gene within the contig
**Gene** | Antibiotic resistance gene
**Gaps** | Gaps in subject (draft genome) and query (antibiotic resistance genes)
**Coverage** | Proportion (%) of the gene covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the antibiotic resistance gene
**Product** | Antibiotic resistance gene product

<br>

#### Select the samples and the database {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
##### $i {.tabset .tabset-fade .tabset-pills}
###### Resfinder
\`\`\`{r, echo=FALSE}
seqdata=read.table("${i}_resfinder.tab", header = T, sep = "\t", dec = ".", quote = "")
seqdata=as.data.frame(seqdata)
data=cbind(seqdata[,2:5], seqdata[,8:10], seqdata[,12:13])
colnames(data)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
seqdata = data[data\$Identity>90,]
seqdata = seqdata[seqdata\$Coverage>90,]
seqdata = seqdata[order(seqdata\$Gene),]
row.names(seqdata)=NULL
if (nrow(seqdata)==0){
  print ("No antibiotic resitance genes from Resfinder database were found")
} else {
kable(seqdata, results='asis', align="c")
}
\`\`\`

###### CARD
\`\`\`{r, echo=FALSE}
seqdata=read.table("${i}_card.tab", header = T, sep = "\t", dec = ".", quote = "")
seqdata=as.data.frame(seqdata)
data=cbind(seqdata[,2:5], seqdata[,8:10], seqdata[,12:13])
colnames(data)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
seqdata = data[data\$Identity>90,]
seqdata = seqdata[seqdata\$Coverage>90,]
seqdata = seqdata[order(seqdata\$Gene),]
row.names(seqdata)=NULL
if (nrow(seqdata)==0){
  print ("No antibiotic resitance genes from CARD database were found")
} else {
kable(seqdata, results='asis', align="c")
}
\`\`\`

###### ARG-ANNOT
\`\`\`{r, echo=FALSE}
seqdata=read.table("${i}_argannot.tab", header = T, sep = "\t", dec = ".", quote = "")
seqdata=as.data.frame(seqdata)
data=cbind(seqdata[,2:5], seqdata[,8:10], seqdata[,12:13])
colnames(data)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
seqdata = data[data\$Identity>90,]
seqdata = seqdata[seqdata\$Coverage>90,]
seqdata = seqdata[order(seqdata\$Gene),]
row.names(seqdata)=NULL
if (nrow(seqdata)==0){
  print ("No antibiotic resitance genes from ARG-ANNOT database were found")
} else {
kable(seqdata, results='asis', align="c")
}
\`\`\`

EOF
done

cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd

#

<br>

#### Summary figures
Presence/Absence of antibiotic resistance genes (coverage and identity > 90%) on each sample.  

##### Select the database: {.tabset .tabset-fade .tabset-pills}
###### Resfinder
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
seqdata=read.table("resfinder_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
seqdata=as.data.frame(seqdata)
seqdata=seqdata[,-2]
#seqdata=melt(seqdata)
#ggplot(seqdata, aes(x = variable, y = FILE, fill = value)) + geom_tile(show.legend=F) + scale_fill_gradientn(colours = c("gainsboro", "chartreuse3", "forestgreen")) + ylab("Isolate") + xlab ("Antibiotic Resistance Gene") + theme(axis.text.x = element_text(angle = 90, hjust=1, vjust = 0.5), legend.position = "none")
datos=as.matrix(seqdata[,-1])
x=colnames(seqdata)[-1]
y=seqdata\$FILE
plot_ly(x=x, y=y, z=datos, type = "heatmap", colors=colorRamp(c("gainsboro", "chartreuse3", "forestgreen")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

###### CARD
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
seqdata=read.table("card_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
seqdata=as.data.frame(seqdata)
seqdata=seqdata[,-2]
#seqdata=melt(seqdata)
#ggplot(seqdata, aes(x = variable, y = FILE, fill = value)) + geom_tile(show.legend=F) + scale_fill_gradientn(colours = c("gainsboro", "chartreuse3", "firebrick3")) + ylab("Isolate") + xlab ("Antibiotic Resistance Gene") + theme(axis.text.x = element_text(angle = 90, hjust=1, vjust = 0.5), legend.position = "none")
datos=as.matrix(seqdata[,-1])
x=colnames(seqdata)[-1]
y=seqdata\$FILE
plot_ly(x=x, y=y, z=datos, type = "heatmap", colors=colorRamp(c("gainsboro", "chartreuse3", "firebrick3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

###### ARG-ANNOT
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
seqdata=read.table("argannot_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
seqdata=as.data.frame(seqdata)
seqdata=seqdata[,-2]
#seqdata=melt(seqdata)
#ggplot(seqdata, aes(x = variable, y = FILE, fill = value)) + geom_tile(show.legend=F) + scale_fill_gradientn(colours = c("gainsboro", "chartreuse3", "dodgerblue3")) + ylab("Isolate") + xlab ("Antibiotic Resistance Gene") + theme(axis.text.x = element_text(angle = 90, hjust=1, vjust = 0.5), legend.position = "none")
datos=as.matrix(seqdata[,-1])
x=colnames(seqdata)[-1]
y=seqdata\$FILE
plot_ly(x=x, y=y, z=datos, type = "heatmap", colors=colorRamp(c("gainsboro", "chartreuse3", "dodgerblue3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
\`\`\`

#


<br>

#### Antibiotic resistance genes (ResFinder) count
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
seqdata=read.table("resfinder_gene_per_isolate.txt", header = T, dec = ".", sep = "\t", check.names = FALSE, quote = "")
seqdata=as.data.frame(seqdata)
#ggplot(data=seqdata, aes(x=Gene, y=Count, fill=Resistance)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) + ylab ("Number of isolates with the gene") +xlab ("Antibiotic Resistance Gene")
#plot_ly(x = seqdata\$Gene, y = seqdata\$Count, type= "bar", split =seqdata\$Resistance)
plot_ly(x = seqdata\$Gene, y = seqdata\$Count, type= "bar", name=seqdata\$Resistance, split=seqdata\$Resistance) %>% layout(showlegend=T)
\`\`\`


<br>

[Back to index](#index)

EOF

cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
## Virulence genes {#virulence}
The search of virulence genes was performed by screening of the draft genome against Virulence Factors Data Base (VFDB, [L. Chen et al., 2005](https://www.ncbi.nlm.nih.gov/pubmed/15608208)) by using [Abricate](https://github.com/tseemann/abricate). Any hit with coverage and/or identity below 90% was removed. To see description of each field, click [here](#resistance).

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
seqdata=read.table("${i}_vfdb.tab", header = T, sep = "\t", dec = ".", quote = "")
seqdata=as.data.frame(seqdata)
data=cbind(seqdata[,2:5], seqdata[,8:10], seqdata[,12:13])
colnames(data)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
seqdata = data[data\$Identity>90,]
seqdata = seqdata[seqdata\$Coverage>90,]
seqdata = seqdata[order(seqdata\$Gene),]
row.names(seqdata)=NULL
if (nrow(seqdata)==0){
  print ("No virulence genes from VFDB database were found")
} else {
kable(seqdata, results='asis', align="c")
}
\`\`\`

EOF
done
cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd

#

<br>

[Back to index](#index)

EOF

cat <<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
## Plasmids {#plasmids}
The search of plasmid replicons was performed by screening of the draft genome against PlasmidFinder database ([A. Carattoli et al., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24777092)) by using [Abricate](https://github.com/tseemann/abricate). Any hit with coverage and/or identity below 90% was removed. To see description of each field, click [here](#resistance).

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
seqdata=read.table("${i}_plasmids.tab", header = T, sep = "\t", dec = ".", quote = "")
seqdata=as.data.frame(seqdata)
data=cbind(seqdata[,2:5], seqdata[,8:10], seqdata[,12:13])
colnames(data)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
seqdata = data[data\$Identity>90,]
seqdata = seqdata[seqdata\$Coverage>90,]
seqdata = seqdata[order(seqdata\$Gene),]
row.names(seqdata)=NULL
if (nrow(seqdata)==0){
  print ("No plasmid replicon genes from Plasmidfinder database were found")
} else {
kable(seqdata, results='asis', align="c")
}
\`\`\`

EOF
done
cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd

#

<br>

[Back to index](#index)

EOF

cat<<EOF >> $OUTWD/report_files/CAUDAL_report.Rmd
## Citation  {#cite} 

<br>

David Abad and Marta Hernandez. *CAUDAL*. (2019) **GitHub** (https://github.com/dabadgarcia/CAUDAL/)

<br>

Also cite the software and databases that are included in CAUDAL pipeline:

* Abricate, [T. Seemann](https://github.com/tseemann/abricate)
* ARG-ANNOT Database, [S.K. Gupta et al., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24145532)
* BLAST, [Z. Zhang et al., 2000](https://www.ncbi.nlm.nih.gov/pubmed/10890397)
* The Comprehensive Antibiotic Resistance Database (CARD), [A.G. McArthur et al., 2013](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3697360/)
* FastTree, [M.N. Price et al., 2009](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2693737/)
* Flye, [M. Kolmogorov et al., 2019](https://doi.org/10.1038/s41587-019-0072-8)
* GTDB-Tk, [P.A. Chaumeil et al., 2019](https://academic.oup.com/bioinformatics/advance-article-abstract/doi/10.1093/bioinformatics/btz848/5626182) 
* mlst, [T. Seemann](https://github.com/tseemann/mlst)
* Prokka, [T. Seemann, 2014](https://www.ncbi.nlm.nih.gov/pubmed/24642063)
* QUAST, [A. Gurevich et al., 2013](https://www.ncbi.nlm.nih.gov/pubmed/23422339)
* R, [R Development Core Team, 2008](https://www.r-project.org/)
	+ ggplot2, [H. Wickham, 2009](https://cran.r-project.org/web/packages/ggplot2/index.html)
	+ ggtree, [G. Yu et al., 2016](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12628)
	+ knitr, [Y. Xie, 2015](https://cran.r-project.org/web/packages/knitr/index.html)
	+ plotly, [C. Sievert et al., 2017](https://cran.r-project.org/web/packages/plotly/index.html)
	+ RColorBrewer, [E. Neuwirth and R.C. Brewer, 2014](https://cran.r-project.org/web/packages/RColorBrewer/index.html)
	+ reshape2, [H. Wickham, 2007](https://cran.r-project.org/web/packages/reshape2/index.html)
	+ rmarkdown, [J.J. Allaire, 2015](https://cran.r-project.org/web/packages/rmarkdown/index.html)
* Roary, [A.J. Page et al., 2015](https://www.ncbi.nlm.nih.gov/pubmed/26198102)
* roary2svg, [T. Seemann](https://github.com/sanger-pathogens/Roary/blob/master/contrib/roary2svg/roary2svg.pl)
* ResFinder Database, [E. Zankari et al., 2012](https://www.ncbi.nlm.nih.gov/pubmed/22782487)
* Virulence Factors Data Base (VFDB), [L. Chen et al., 2005](https://www.ncbi.nlm.nih.gov/pubmed/15608208)

<br>

EOF
